# vim: syntax=none nosmartindent:


corewar with dna :

dna is the source code
i keep a population of n dna
i make them fight all versus each other
i keep the best

dna will be generated and mixed in python
fights will happen in C to have that being quickly solved. A fight can be saved with an option (save=file.txt) and can be replayed.

DNA is mixing up both winner, and mutate it a bit to generate n children, that will be mixed with current population. I may have keep track of the genealogy and % of mutation.

I could mutate the winning one to generate n of them, instead of mixing.

MMhh

Because i would like multiples ways to exists

So that would be creating families



But i could just pick the n best, mutate m times each, and take the output and replace the n*m worst by these new ones. m can be 0, so i keep the original as well.

How to find out who wins : number of step to erase all other's cells. If it needs more steps than like 3 times the all memory layout, then i stop the game, and store that number of step for both loosers.


http://vyznev.net/corewar/guide.html

https://users.obs.carnegiescience.edu/birk/COREWAR/DOCS/guide2red.txt

mutation = change one line, or duplicate a random size to a random another place

A win isn't when no more cell is owned by the other, but when there is an error in one's program.
like being asked to run a DAT command (that is pretty much it actually).

Should i bother using 32 bits to store everything ? I have to check if i can have the first 4 bits and turn that into an integer easily.
Or i save/read a struct, and not bother if some types are a bit wide. it's just a source code.




tools needed : 
	runner, that will read code A and code B, and run and see who wins (first to run a DAT or something that isn't runnable (could be a bug))
	compiler, that will turn ascii readable code into pseudo code
	dna mixing, that also has to understand code, and mix two codes together
	dna mutation, that also has to understand code, and mutate n% of it, or n items in it
	championship, which will handle x sources, and sort them to find the fittest (meaning having them fighting against each other)


color code : green for first player, red for second. each char is the first letter of the instruction (lowercase if already taken, or integer. yeah integer is good).
Underline to find the currently run command.

the program will all be owned by player.

locate program at start
	like i have a core of 4000.
	program A is randomly put at 500, and has a length of 100.
	program B has a lenght of 50
	random start for B is 4000-100-50 -> 3800. 
	if random start is 200, then it start at 200
	if random start is > 500-50, like 470, then it start at 500+100.


random notes : 
https://stackoverflow.com/questions/32619428/increasing-array-size-dynamically-in-c




mov 1,2 move the whole instruction
move #1, 2 move only a value....


---
genome

write a program that can generate a random line. the line will be generated in text. so it's random (MOV,JMP,...) (#@ ) (0..4096).
write a program that can modify an existing line, by changing one line to another (complete line)
in any case, if there are too many lines, remove randomly till there are less than 200 lines

---
championship

how to sort them by perf ? well, i think have all of them fight against all of them, and score is the number of win. but 100 * 100 can be long, can't it
well maybe not that much. 
and remove similar programs, if any (by comparing md5s)
and have them fight 5 times at least, because the outcome can change

maybe i'll use bash. i need to write how progams will call each other



----
todo later

if size of core too little to host two programs, raise error 
if size of display too little to display mem, raise error
write a program that can mix 2 programs (later)





--- genomes

list files in dir
if none, create 1 empty file and add it to the list

pick 10% of all files. if none, all files are mutated
all mutation create a bunch of new files

for each file, fight 5 times versus all other files. for each, win=+10, lose=-10. tie=+0 
score is a // list to the file list.

if number of file >100, remove the ones with the lowest score.
(meaning that before a championship, we have at best 110 files)




https://docs.python.org/2/library/ctypes.html <- call C from python.




maybe adding an option to c code, to randomly modify code (duplicate / mutate) till it mostly win. 
or have another binary for that.
mmh
because basically, i could just have two guys fighting, and if one mostly lose, we randomly modify it till it wins, then we do the same with the other one.

Or, having another C program, that is like : i create two programs, empty. both lose. i take the first, and tweak it, till it win at least 75% of fights. If so, i do the same for the other one.





run : no install, no init, just run



f g h i j k
0 1 2 3 4 5
pos is random from 0 to 6, meaning random of 7
insert a b c 
random is 4, so i insert before 4

so: 
for last to 4
5 -> 8
4 -> 7
a -> 4
b -> 5
c -> 6

if random is 0
for last to 0
5->8
4->7
0->3
a->0
b->1
c->2

if random is 7
since 7 > len; no move
a->7
b->8
c->9






a b c d e f g 
0 2 3 4 5 6 7

a=5 
b=2
pos= random 8 - 3 +1
pos=3

size=3
a=2 b=5
pos > a -> pos=6

program size=8+3=11

i=6. 



1 2 3 4 5 6
		5 6
3 5





when i'll have somethg that looks promising : save and load for the pool of fighters. save and load to /tmp/blah (create dir if doesn't exists), with a loop for all
i save to /tmp/, up to the user to backup them (for now)
note : when saving, save two versions of the program : cw and red

make some threads to do the n fights
meaning that i should get rid of some global var, like the core. that can be annoying.



int main()
{
    pthread_t tid[2];
    for (int i = 0; i < 2; i++) {
        pthread_create(&tid[i], NULL, routine, NULL);
    }
    for (int i = 0; i < 2; i++)
       pthread_join(tid[i], NULL);
    return 0;
}



now i have to save. each new generation, i need to save the source for A and B, to see them fighting.
and i would like the python program to turn a cw into red, but vice versa too (based on the extension).



bug rdecompil, doesn't match for jim
mov doesn't work ?
